// operators
#intrinsic
num.__unm: fn(self) -> self = "function(self) return -self end"

#intrinsic
num.__add: fn(self, self) -> self = "function(a, b) return a+b end"
#intrinsic
num.__sub: fn(self, self) -> self = "function(a, b) return a-b end"
#intrinsic
num.__mul: fn(self, self) -> self = "function(a, b) return a*b end"
#intrinsic
num.__mod: fn(self, self) -> self = "function(a, b) return a%b end"
#intrinsic
num.__div: fn(self, self) -> self = "function(a, b) return a/b end"
#intrinsic
num.__pow: fn(self, self) -> self = "function(a, b) return a^b end"

#intrinsic
num.__eq: fn(self, self) -> bool = "function(a, b) return a==b end"
#intrinsic
num.__lt: fn(self, self) -> bool = "function(a, b) return a<b end"
#intrinsic
num.__le: fn(self, self) -> bool = "function(a, b) return a<=b end"

#intrinsic
num.to_str: fn(self) -> str = "function(a) return tostring(a) end"
#intrinsic
num.from_str: fn(str) -> self =
#"function(a)
	local a = tonumber(a)
	assert(a ~= nil, "str to num conversion failed")
	return a
end"#

// constants
#intrinsic
num.NAN: num = "math.huge"
#intrinsic
num.INF: num = "0 / 0"
#intrinsic
num.PI: num = "math.pi"
#intrinsic
num.TWO_PI: num = "6.283185307179586"

// math
// Does not include, ldexp, fmod, modf, deg, rad
#intrinsic
num.abs:   fn(self) -> self = "math.abs"
#intrinsic
num.acos:  fn(self) -> self = "math.acos"
#intrinsic
num.asin:  fn(self) -> self = "math.asin"
#intrinsic
num.atan:  fn(self) -> self = "math.atan"
#intrinsic
num.atan2: fn(self, self) -> self = "math.atan2"
#intrinsic
num.ceil:  fn(self) -> self = "math.ceil"
#intrinsic
num.cos:   fn(self) -> self = "math.cos"
#intrinsic
num.cosh:  fn(self) -> self = "math.cosh"
#intrinsic
num.exp:   fn(self) -> self = "math.exp"
#intrinsic
num.floor: fn(self) -> self = "math.floor"
#intrinsic
num.ln:    fn(self) -> self = "math.log"
#intrinsic
num.log10: fn(self) -> self = "math.log10"
#intrinsic
num.max:   fn(self, self) -> self = "math.max"
#intrinsic
num.min:   fn(self, self) -> self = "math.min"
#intrinsic
num.sin:   fn(self) -> self = "math.sin"
#intrinsic
num.sinh:  fn(self) -> self = "math.sinh"
#intrinsic
num.sqrt:  fn(self) -> self = "math.sqrt"
#intrinsic
num.tan:   fn(self) -> self = "math.tan"
#intrinsic
num.tanh:  fn(self) -> self = "math.tanh"

fn num.log2(self) {
	return self.ln() / num.ln(2.0)
}
