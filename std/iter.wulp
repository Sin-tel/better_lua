// TODO: would be nice if we could implement these in the language itself,
// but that would require traits/typeclasses

#lua #"
local function range_next(self)
	local count = self.counter
	if self.counter >= self.stop then
		return nil
	end
	self.counter = self.counter + 1
	return count
end"#

#intrinsic l_range: fn(int) -> iter[int] = #"
function (stop)
	return { stop = stop, counter = 0, ["next"] = range_next }
end"#

fn range(n: int) -> iter[int] {
	return l_range(n)
}

#lua #"
local function array_next(self)
	local item = self.a[self.counter]
	if self.counter >= self.a.n then
		return nil
	end
	self.counter = self.counter + 1
	return item
end"#

#intrinsic array.iter: fn([T]) -> iter[T] = #"
function (a)
	return { a = a, counter = 0, ["next"] = array_next }
end"#

#intrinsic iter.collect: fn(iter[T]) -> [T] = #"
function (it)
	local l = setmetatable({}, array)
	local idx = 0
	while true do
		local item = it.next(it)
		if item == nil then
			break
		end
		l[idx] = item
		idx = idx + 1
	end
	l.n = idx
	return l
end"#


#lua #"
local function map_next(self)
	local item = self.it.next(self.it)
	if item == nil then
		return nil
	end
	return self.f(item)
end"#

#intrinsic iter.map: fn(iter[T], fn(T) -> T) -> iter[T] = #"
function (it, f)
	return { it = it, f = f, ["next"] = map_next }
end"#


#intrinsic iter.reduce: fn(iter[T], T, fn(T, T) -> T) -> T = #"
function(it, init, f)
	local v = init
	while true do
		local item = it.next(it)
		if item == nil then
			break
		end
		v = f(v, item)
	end
	return v
end"#
