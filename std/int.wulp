// operators
#intrinsic
int.__unm: fn(self) -> self = "function(self) return -self end"

#intrinsic
int.__add: fn(self, self) -> self = "function(a, b) return a+b end"
#intrinsic
int.__sub: fn(self, self) -> self = "function(a, b) return a-b end"
#intrinsic
int.__mul: fn(self, self) -> self = "function(a, b) return a*b end"
#intrinsic
int.__mod: fn(self, self) -> self = "function(a, b) return a%b end"
#intrinsic
int.__div: fn(self, self) -> num = "function(a, b) return a/b end"
#intrinsic
int.__pow: fn(self, self) -> num = "function(a, b) return a^b end"

#intrinsic
int.__eq: fn(self, self) -> bool = "function(a, b) return a==b end"

#intrinsic
int.__lt: fn(self, self) -> bool = "function(a, b) return a<b end"
#intrinsic
int.__le: fn(self, self) -> bool = "function(a, b) return a<=b end"

#intrinsic
int.to_str: fn(self) -> str = "function(a) return tostring(a) end"

// math
#intrinsic
int.abs: fn(self) -> self = "math.abs"

#intrinsic
int.max: fn(self, self) -> self = "math.max"

#intrinsic
int.min: fn(self, self) -> self = "math.min"

#intrinsic
int.idiv: fn(self, self) -> self = #"
function(self, denom)
	assert(denum ~= 0, "division by zero")
	return math.floor(self / denom)
end
"#



// bitwise ops
#intrinsic
int.bit_shl:   fn(self, self) -> self = "bit.lshift"

#intrinsic
int.bit_shr:   fn(self, self) -> self = "bit.rshift"

#intrinsic
int.bit_sar:   fn(self, self) -> self = "bit.arshift"

#intrinsic
int.bit_or:   fn(self, self) -> self = "bit.bor"

#intrinsic
int.bit_and:   fn(self, self) -> self = "bit.band"

#intrinsic
int.bit_xor:   fn(self, self) -> self = "bit.bxor"

#intrinsic
int.bit_not:   fn(self) -> self = "bit.bnot"

#intrinsic
int.bit_rol:   fn(self, self) -> self = "bit.rol"

#intrinsic
int.bit_ror:   fn(self, self) -> self = "bit.ror"

#intrinsic
int.bit_swap:   fn(self) -> self = "bit.bswap"

// TODO: optional length argument
#intrinsic
int.to_hex: fn(self) -> str = #"function(self) return "0x" .. bit.tohex(self) end"#

