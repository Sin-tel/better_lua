file ::= statlist
block ::= '{' statlist '}' | stat | laststat
statlist ::= {stat} [laststat]

stat ::= assignment
       | let_stat
       | assign_op_stat
       | fn_call
       | block
       | 'while' expr block
       | 'if' expr block {'elseif' expr block} ['else' block]
       | 'for' names 'in' expr_list block
       | 'fn' Name fn_body
       | 'struct' Name struct

laststat ::= 'return' [expr_list] | 'break'

let_stat ::= 'let' {} '=' expr_list
name_ty_list ::= name_ty {',' name_ty}
name_ty ::= Name [':' type]

assign_op_stat ::= suffix_expr assign_op expr

assignment ::= vars '=' expr_list
vars ::= suffix_expr {',' suffix_expr}

fn_call   ::= suffix_expr '(' [expr_list] ')'
fn_body   ::= '(' [name_ty_list] ')' block
expr_list ::= expr {',' expr}

expr ::= literal
       | 'fn' fn_body
       | suffix_expr
       | fn_call
       | expr bin_op expr
       | un_op expr
       | array

primary_expr ::= Name | '(' expr ')'
suffix_expr ::= prefix { suffix }
prefix ::= primary_expr | fn_call
suffix ::= '.' Property
         | '[' expr ']'
array  ::= '[' {expr [sep]} ']'
literal ::= 'nil' | 'true' | 'false' | Numeral | String

struct ::= '{' [fieldlist] '}'
fieldlist ::= field {[sep] field}
sep ::= ',' | ';'
field ::= Property [':' type] | Property [':' type] '=' expr | 'fn' Property fn_body
Property ::= Name

type ::= Name
       | 'int'
       | 'num'
       | 'str'
       | 'bool'
       | '[' Type ']'
       | 'maybe(' Type ')'

bin_op ::= '+' | '-' | '*' | '/' | '^' | '%' | '..'
        | '==' | '!=' | '<' | '>' | '<=' | '>='
        | 'and' | 'or'

un_op ::= '-' | 'not'

assign_op ::= '+=' | '-=' | '*=' | '/=' | '^=' | '%=' | '..='
