// Does not include, ldexp, fmod, modf, deg, rad

// constants
#lua #"
num.INF = math.huge
num.NAN = 0 / 0
num.PI = math.pi
num.TWO_PI = 6.283185307179586
"#
#intrinsic
num.NAN: num
#intrinsic
num.INF: num
#intrinsic
num.PI: num
#intrinsic
num.TWO_PI: num

// math
#lua #"
num.abs = math.abs
num.acos = math.acos
num.asin = math.asin
num.atan = math.atan
num.atan2 = math.atan2
num.ceil = math.ceil
num.cos = math.cos
num.cosh = math.cosh
num.exp = math.exp
num.floor = math.floor
num.ln = math.log
num.log10 = math.log10
num.max = math.max
num.min = math.min
num.sin = math.sin
num.sinh = math.sinh
num.sqrt = math.sqrt
num.tan = math.tan
num.tanh = math.tanh
"#
#intrinsic
num.abs:   fn(self) -> self
#intrinsic
num.acos:  fn(self) -> self
#intrinsic
num.asin:  fn(self) -> self
#intrinsic
num.atan:  fn(self) -> self
#intrinsic
num.atan2: fn(self, self) -> self
#intrinsic
num.ceil:  fn(self) -> self
#intrinsic
num.cos:   fn(self) -> self
#intrinsic
num.cosh:  fn(self) -> self
#intrinsic
num.exp:   fn(self) -> self
#intrinsic
num.floor: fn(self) -> self
#intrinsic
num.ln:    fn(self) -> self
#intrinsic
num.log10: fn(self) -> self
#intrinsic
num.max:   fn(self, self) -> self
#intrinsic
num.min:   fn(self, self) -> self
#intrinsic
num.sin:   fn(self) -> self
#intrinsic
num.sinh:  fn(self) -> self
#intrinsic
num.sqrt:  fn(self) -> self
#intrinsic
num.tan:   fn(self) -> self
#intrinsic
num.tanh:  fn(self) -> self

fn num.log2(self) {
	return self.ln() / num.ln(2.0)
}
