struct Test {
	x = 0
}

fn Test.inc(self) {
	self.x += 1
}
fn Test.add(self, n) {
	self.x += n
}
fn Test.add_test(self, other: self) {
	self.x += other.x
}
fn Test.new(x) -> self {
	let new = Test(x=x)
	return new
}

fn main() {
	let t = Test()
	assert(t.x == 0)

	let t1 = Test(x = 1)
	assert(t1.x == 1)

	let t2 = Test.new(2)
	assert(t2.x == 2)

	Test.inc(t)
	assert(t.x == 1)
	t.add(5)
	assert(t.x == 6)

	let t2 = Test.new(10)
	assert(t2.x == 10)

	t.add_test(t2)
	assert(t.x == 16)
	assert(t2.x == 10)
}
